{"version":3,"sources":["components/NewTodo.js","components/TodoList.js","components/TodoItem.js","components/TaskDisplay.js","App.js","serviceWorker.js","index.js"],"names":["NewTodo","props","addTask","createTask","onSubmit","className","type","placeholder","size","onChange","id","TodoList","TodoItem","task","markImportant","deleteTask","markDone","role","onClick","TaskDisplay","tasks","renderedList","map","idx","key","length","Fragment","App","setState","item","target","value","e","input","document","querySelector","preventDefault","state","newTask","Date","now","prevState","taskList","concat","bind","parentNode","parentElement","classList","toggle","li","newTaskList","this","filter","Number","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d831f4b5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NewTodo = (props) => {\r\n    const addTask = props.addTask;\r\n    const createTask = props.createTask;\r\n    return(\r\n        <form onSubmit={addTask}>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <input type=\"text\" placeholder=\"enter a task\" size=\"lg\" className=\"form-control\" onChange={createTask} id=\"task-entry\"/>\r\n                </div>\r\n            </div>\r\n            <br/>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <button type=\"reset\" className=\"btn btn-outline-danger btn-block\">cancel</button>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <button type=\"submit\" className=\"btn btn-outline-primary btn-block\">add task</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default NewTodo;","import React from 'react';\r\nimport NewTodo from './NewTodo';\r\n\r\nconst TodoList = (props) => {\r\n\r\n    return(\r\n        <div className=\"todoListMain\">\r\n            <div className=\"header\">\r\n                <NewTodo createTask={props.createTask} addTask={props.addTask}/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\n\r\nconst TodoItem = (props) => {\r\n    const task = props.task;\r\n    const id = props.id;\r\n    const markImportant = props.markImportant;\r\n    const deleteTask = props.deleteTask;\r\n    const markDone = props.markDone;\r\n    return(\r\n        <li className=\"list-group-item\" id={id}>\r\n            {task.task}\r\n            <div className=\"btn-group float-right\" role=\"group\">\r\n                <button type=\"button\" className=\"btn btn-success\" onClick={markDone}>Mark Done</button>\r\n                &nbsp;\r\n                <button type=\"button\" className=\"btn btn-warning\" onClick={markImportant}>Mark Important</button>\r\n                &nbsp;\r\n                <button type=\"button\" className=\"btn btn-danger\" onClick={deleteTask}>Delete Task</button>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst TaskDisplay = (props) => {\r\n    const tasks = props.tasks;\r\n    const markImportant = props.markImportant;\r\n    const deleteTask = props.deleteTask;\r\n    const markDone = props.markDone;\r\n    const renderedList = tasks.map((task, idx) => {\r\n       return  <TodoItem key={task.key} task={task} markImportant={markImportant} deleteTask={deleteTask} markDone={markDone} id={idx}/>\r\n    })\r\n    if(tasks.length !== 0) {\r\n        return(\r\n            <React.Fragment>\r\n                <h2>List of tasks</h2>\r\n                <ul className=\"list-group\">\r\n                    {renderedList}\r\n                </ul>\r\n            </React.Fragment>\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default TaskDisplay;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './css/style.css';\r\nimport TodoList from './components/TodoList';\r\nimport TaskDisplay from './components/TaskDisplay';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      item:\"\",\r\n      taskList: [],\r\n    }\r\n    this.createTask = this.createTask.bind(this);\r\n    this.addTask = this.addTask.bind(this);\r\n    this.markImportant = this.markImportant.bind(this);\r\n    this.deleteTask = this.deleteTask.bind(this);\r\n    this.markDone = this.markDone.bind(this);\r\n  }\r\n  createTask = (task) => {\r\n    this.setState(\r\n      { item: task.target.value }\r\n    );\r\n  }\r\n  addTask = (e) => {\r\n    const input = document.querySelector('#task-entry');\r\n    e.preventDefault();\r\n    if(this.state.item !== \"\") {\r\n      let newTask = {\r\n        task: this.state.item,\r\n        key: Date.now(),\r\n      }\r\n      this.setState((prevState => {\r\n        return {\r\n          taskList: prevState.taskList.concat(newTask)\r\n        };\r\n      }));\r\n      this.setState({\r\n        item: \"\"\r\n      });\r\n    }\r\n    input.value = \"\";\r\n  }\r\n  markImportant(e) {\r\n    const li = e.target.parentNode.parentElement;\r\n    li.classList.toggle('important');\r\n  }\r\n  deleteTask(e) {\r\n    const li = e.target.parentNode.parentElement;\r\n    const newTaskList = this.state.taskList.filter((task, idx) => idx !== Number(li.id));\r\n    this.setState({\r\n      taskList: newTaskList\r\n    });\r\n  }\r\n  markDone(e){\r\n    const li = e.target.parentNode.parentElement;\r\n    li.classList.toggle('done');\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>ToDoList</h1>\r\n        <TodoList addTask={this.addTask} createTask={this.createTask}/>\r\n        <TaskDisplay tasks={this.state.taskList} markImportant={this.markImportant} deleteTask={this.deleteTask} markDone={this.markDone}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}